using NUnit.Framework;
using Pancake.ManagedGeometry.Algo;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Pancake.ManagedGeometry.Tests.AlgoTest
{
    public class MergeCrv
    {
        [Test]
        public void MergeIntoMultiple()
        {
            var array = new Line3d[]
            {
                new Line3d((-15.4484389693458, 0.539683457444395, 0.0), (10.6292918190685, 16.1592799435705, 0.0)),
                new Line3d((10.6292918190685, 16.1592799435705, 0.0), (35.2856986637922, -1.81064368902467, 0.0)),
                new Line3d((35.2856986637922, -1.81064368902467, 0.0), (15.4352016277859, -27.8252424362119, 0.0)),
                new Line3d((15.4352016277859, -27.8252424362119, 0.0), (-11.6241601212964, -33.3624863462557, 0.0)),
                new Line3d((-11.6241601212964, -33.3624863462557, 0.0), (-13.5047335247076, -2.54197779035121, 0.0)),
                new Line3d((-13.5047335247076, -2.54197779035121, 0.0), (-6.08691621125257, -3.06435929129875, 0.0)),
                new Line3d((-6.08691621125257, -3.06435929129875, 0.0), (-15.4484389693458, 0.539683457444395, 0.0)),
                new Line3d((57.6165481740306, 53.5884683058195, 0.0), (60.912534303127, 34.4118217365313, 0.0)),
                new Line3d((60.912534303127, 34.4118217365313, 0.0), (153.799416123117, 31.41547071008, 0.0)),
                new Line3d((153.799416123117, 31.41547071008, 0.0), (147.806714070214, 72.4654797724627, 0.0)),
                new Line3d((147.806714070214, 72.4654797724627, 0.0), (104.958894391961, 69.4691287460114, 0.0)),
                new Line3d((104.958894391961, 69.4691287460114, 0.0), (87.2804233358983, 48.1950364582072, 0.0)),
                new Line3d((87.2804233358983, 48.1950364582072, 0.0), (61.8114396110624, 67.3716830274955, 0.0)),
                new Line3d((61.8114396110624, 67.3716830274955, 0.0), (57.6165481740306, 53.5884683058195, 0.0)),
                new Line3d((14.7687284957771, 24.523863349242, 0.0), (5.18040521113294, 67.0720479248503, 0.0)),
                new Line3d((5.18040521113294, 67.0720479248503, 0.0), (-31.9743475168631, 52.0902927925939, 0.0)),
                new Line3d((-31.9743475168631, 52.0902927925939, 0.0), (-17.891497692542, 31.41547071008, 0.0)),
                new Line3d((-17.891497692542, 31.41547071008, 0.0), (37.840631399452, 51.7906576899487, 0.0)),
                new Line3d((37.840631399452, 51.7906576899487, 0.0), (41.7358877338387, 26.6213090677579, 0.0)),
                new Line3d((41.7358877338387, 26.6213090677579, 0.0), (14.7687284957771, 24.523863349242, 0.0)),
            };

            var crvs = array.Select(l => new CurveRepresentation(l.Start, l.End)).ToArray();
            var result = CurveOperation.MergeCurves(crvs).ToArray();

            Assert.AreEqual(result.Length, 3);
            var resultLength = result.Select(list => list.Sum(l => array[l.Index].Length))
                .OrderBy(s => s).ToArray();

            Assert.AreEqual(169.596174, resultLength[0], 1e-4);
            Assert.AreEqual(220.549678, resultLength[1], 1e-4);
            Assert.AreEqual(270.78, resultLength[2], 1e-4);
        }
    }
}
